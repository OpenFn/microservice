searchNodes=[{"doc":"Microservice keeps the contexts that define your domain and business logic.Contexts are also responsible for managing your data, regardless if it comes from the database, an external API or others.","ref":"Microservice.html","title":"Microservice","type":"module"},{"doc":"The entrypoint for defining your web interface, such as controllers, views, channels and so on.This can be used in your application as:use MicroserviceWeb, :controller use MicroserviceWeb, :viewThe definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases.Do NOT define functions inside the quoted expressions below. Instead, define any helper function in modules and import those modules here.","ref":"MicroserviceWeb.html","title":"MicroserviceWeb","type":"module"},{"doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"MicroserviceWeb.html#__using__/1","title":"MicroserviceWeb.__using__/1","type":"macro"},{"doc":"","ref":"MicroserviceWeb.html#channel/0","title":"MicroserviceWeb.channel/0","type":"function"},{"doc":"","ref":"MicroserviceWeb.html#controller/0","title":"MicroserviceWeb.controller/0","type":"function"},{"doc":"","ref":"MicroserviceWeb.html#router/0","title":"MicroserviceWeb.router/0","type":"function"},{"doc":"","ref":"MicroserviceWeb.html#view/0","title":"MicroserviceWeb.view/0","type":"function"},{"doc":"","ref":"MicroserviceWeb.Endpoint.html","title":"MicroserviceWeb.Endpoint","type":"module"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast/3.","ref":"MicroserviceWeb.Endpoint.html#broadcast/3","title":"MicroserviceWeb.Endpoint.broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3.","ref":"MicroserviceWeb.Endpoint.html#broadcast!/3","title":"MicroserviceWeb.Endpoint.broadcast!/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4.","ref":"MicroserviceWeb.Endpoint.html#broadcast_from/4","title":"MicroserviceWeb.Endpoint.broadcast_from/4","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4.","ref":"MicroserviceWeb.Endpoint.html#broadcast_from!/4","title":"MicroserviceWeb.Endpoint.broadcast_from!/4","type":"function"},{"doc":"Callback implementation for Plug.call/2.","ref":"MicroserviceWeb.Endpoint.html#call/2","title":"MicroserviceWeb.Endpoint.call/2","type":"function"},{"doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"MicroserviceWeb.Endpoint.html#child_spec/1","title":"MicroserviceWeb.Endpoint.child_spec/1","type":"function"},{"doc":"Returns the endpoint configuration for keyReturns default if the key does not exist.","ref":"MicroserviceWeb.Endpoint.html#config/2","title":"MicroserviceWeb.Endpoint.config/2","type":"function"},{"doc":"Reloads the configuration given the application environment changes.","ref":"MicroserviceWeb.Endpoint.html#config_change/2","title":"MicroserviceWeb.Endpoint.config_change/2","type":"function"},{"doc":"Returns the host for the given endpoint.","ref":"MicroserviceWeb.Endpoint.html#host/0","title":"MicroserviceWeb.Endpoint.host/0","type":"function"},{"doc":"Callback implementation for Plug.init/1.","ref":"MicroserviceWeb.Endpoint.html#init/1","title":"MicroserviceWeb.Endpoint.init/1","type":"function"},{"doc":"Instruments the given function.event is the event identifier (usually an atom) that specifies which instrumenting function to call in the instrumenter modules. runtime is metadata to be associated with the event at runtime (e.g., the query being issued if the event to instrument is a DB query).Examplesinstrument :render_view, %{view: &quot;index.html&quot;}, fn -&gt; render(conn, &quot;index.html&quot;) end","ref":"MicroserviceWeb.Endpoint.html#instrument/3","title":"MicroserviceWeb.Endpoint.instrument/3","type":"macro"},{"doc":"Generates the path information when routing to this endpoint.","ref":"MicroserviceWeb.Endpoint.html#path/1","title":"MicroserviceWeb.Endpoint.path/1","type":"function"},{"doc":"Generates the script name.","ref":"MicroserviceWeb.Endpoint.html#script_name/0","title":"MicroserviceWeb.Endpoint.script_name/0","type":"function"},{"doc":"Starts the endpoint supervision tree.","ref":"MicroserviceWeb.Endpoint.html#start_link/1","title":"MicroserviceWeb.Endpoint.start_link/1","type":"function"},{"doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static. Meant to be used for Subresource Integrity with CDNs.","ref":"MicroserviceWeb.Endpoint.html#static_integrity/1","title":"MicroserviceWeb.Endpoint.static_integrity/1","type":"function"},{"doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity.","ref":"MicroserviceWeb.Endpoint.html#static_lookup/1","title":"MicroserviceWeb.Endpoint.static_lookup/1","type":"function"},{"doc":"Generates a route to a static file in priv/static.","ref":"MicroserviceWeb.Endpoint.html#static_path/1","title":"MicroserviceWeb.Endpoint.static_path/1","type":"function"},{"doc":"Generates the static URL without any path information.It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"MicroserviceWeb.Endpoint.html#static_url/0","title":"MicroserviceWeb.Endpoint.static_url/0","type":"function"},{"doc":"Generates the endpoint base URL but as a URI struct.It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"MicroserviceWeb.Endpoint.html#struct_url/0","title":"MicroserviceWeb.Endpoint.struct_url/0","type":"function"},{"doc":"","ref":"MicroserviceWeb.Endpoint.html#subscribe/1","title":"MicroserviceWeb.Endpoint.subscribe/1","type":"function"},{"doc":"","ref":"MicroserviceWeb.Endpoint.html#subscribe/3","title":"MicroserviceWeb.Endpoint.subscribe/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.unsubscribe/1.","ref":"MicroserviceWeb.Endpoint.html#unsubscribe/1","title":"MicroserviceWeb.Endpoint.unsubscribe/1","type":"function"},{"doc":"Generates the endpoint base URL without any path information.It uses the configuration under :url to generate such.","ref":"MicroserviceWeb.Endpoint.html#url/0","title":"MicroserviceWeb.Endpoint.url/0","type":"function"},{"doc":"Conveniences for translating and building error messages.","ref":"MicroserviceWeb.ErrorHelpers.html","title":"MicroserviceWeb.ErrorHelpers","type":"module"},{"doc":"Translates an error message.","ref":"MicroserviceWeb.ErrorHelpers.html#translate_error/1","title":"MicroserviceWeb.ErrorHelpers.translate_error/1","type":"function"},{"doc":"","ref":"MicroserviceWeb.ErrorView.html","title":"MicroserviceWeb.ErrorView","type":"module"},{"doc":"Returns true whenever the list of templates changes in the filesystem.","ref":"MicroserviceWeb.ErrorView.html#__phoenix_recompile__?/0","title":"MicroserviceWeb.ErrorView.__phoenix_recompile__?/0","type":"function"},{"doc":"The resource name, as an atom, for this view","ref":"MicroserviceWeb.ErrorView.html#__resource__/0","title":"MicroserviceWeb.ErrorView.__resource__/0","type":"function"},{"doc":"Returns the template root alongside all templates.","ref":"MicroserviceWeb.ErrorView.html#__templates__/0","title":"MicroserviceWeb.ErrorView.__templates__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"MicroserviceWeb.ErrorView.html#render/2","title":"MicroserviceWeb.ErrorView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"MicroserviceWeb.ErrorView.html#template_not_found/2","title":"MicroserviceWeb.ErrorView.template_not_found/2","type":"function"},{"doc":"","ref":"MicroserviceWeb.Receiver.html","title":"MicroserviceWeb.Receiver","type":"module"},{"doc":"","ref":"MicroserviceWeb.Receiver.html#receive/2","title":"MicroserviceWeb.Receiver.receive/2","type":"function"},{"doc":"","ref":"MicroserviceWeb.Router.html","title":"MicroserviceWeb.Router","type":"module"},{"doc":"","ref":"MicroserviceWeb.Router.html#api/2","title":"MicroserviceWeb.Router.api/2","type":"function"},{"doc":"Callback invoked by Plug on every request.","ref":"MicroserviceWeb.Router.html#call/2","title":"MicroserviceWeb.Router.call/2","type":"function"},{"doc":"Callback required by Plug that initializes the router for serving web requests.","ref":"MicroserviceWeb.Router.html#init/1","title":"MicroserviceWeb.Router.init/1","type":"function"},{"doc":"Module with named helpers generated from MicroserviceWeb.Router.","ref":"MicroserviceWeb.Router.Helpers.html","title":"MicroserviceWeb.Router.Helpers","type":"module"},{"doc":"Generates the path information including any necessary prefix.","ref":"MicroserviceWeb.Router.Helpers.html#path/2","title":"MicroserviceWeb.Router.Helpers.path/2","type":"function"},{"doc":"","ref":"MicroserviceWeb.Router.Helpers.html#receiver_path/2","title":"MicroserviceWeb.Router.Helpers.receiver_path/2","type":"function"},{"doc":"","ref":"MicroserviceWeb.Router.Helpers.html#receiver_path/3","title":"MicroserviceWeb.Router.Helpers.receiver_path/3","type":"function"},{"doc":"","ref":"MicroserviceWeb.Router.Helpers.html#receiver_url/2","title":"MicroserviceWeb.Router.Helpers.receiver_url/2","type":"function"},{"doc":"","ref":"MicroserviceWeb.Router.Helpers.html#receiver_url/3","title":"MicroserviceWeb.Router.Helpers.receiver_url/3","type":"function"},{"doc":"Generates an integrity hash to a static asset given its file path.","ref":"MicroserviceWeb.Router.Helpers.html#static_integrity/2","title":"MicroserviceWeb.Router.Helpers.static_integrity/2","type":"function"},{"doc":"Generates path to a static asset given its file path.","ref":"MicroserviceWeb.Router.Helpers.html#static_path/2","title":"MicroserviceWeb.Router.Helpers.static_path/2","type":"function"},{"doc":"Generates url to a static asset given its file path.","ref":"MicroserviceWeb.Router.Helpers.html#static_url/2","title":"MicroserviceWeb.Router.Helpers.static_url/2","type":"function"},{"doc":"Generates the connection/endpoint base URL without any path information.","ref":"MicroserviceWeb.Router.Helpers.html#url/1","title":"MicroserviceWeb.Router.Helpers.url/1","type":"function"},{"doc":"","ref":"MicroserviceWeb.UserSocket.html","title":"MicroserviceWeb.UserSocket","type":"module"},{"doc":"Callback implementation for Phoenix.Socket.connect/3.","ref":"MicroserviceWeb.UserSocket.html#connect/3","title":"MicroserviceWeb.UserSocket.connect/3","type":"function"},{"doc":"Callback implementation for Phoenix.Socket.id/1.","ref":"MicroserviceWeb.UserSocket.html#id/1","title":"MicroserviceWeb.UserSocket.id/1","type":"function"},{"doc":"","ref":"ShellWorker.html","title":"ShellWorker","type":"module"},{"doc":"Run a job with the OpenFn/Core cli in an isolated NodeVM, given paths for state, expression, and final_state, killing that NodeVM after a specified number of seconds.","ref":"ShellWorker.html#execute/1","title":"ShellWorker.execute/1","type":"function"},{"doc":"MicroserviceTo start your OpenFn Microservice:Install dependencies with mix deps.getInstall Node.js dependencies with npm install --prefix ./assetsCreate a .env file with cp .env.example .envRun tests with env $(cat .env | grep -v &quot;#&quot; | xargs ) mix testStart server with env $(cat .env | grep -v &quot;#&quot; | xargs ) iex -S mix phx.serverNow you make HTTP post requests to localhost:4000/inbox and they will be processed by the job runner.","ref":"readme.html","title":"Microservice","type":"extras"},{"doc":"An open source server application (this application, microservice.)The open source inbox application, which will be used by both platform and microservice to handle HTTP requestsThe open source dispatcher application which will be used by both platform and microservice to execute jobs using OpenFn/core.A Dockerfile that, given a job, an adaptor, and a credential, is able to automatically generate a container that runs the microservice for that job.","ref":"readme.html#mvp","title":"Microservice - MVP","type":"extras"},{"doc":"[x] mix phx.server receives receipts and sends 200[ ] Chain jobs together[ ] Timer jobs can keep state[ ] tmp files are deleted after job is run[ ] bring core out of package.json[ ] endpoint gets URL and PORT from .env[x] ShellWorker picks up config from .env[x] ShellWorker executes it, given preloaded job, cred, adaptor, and core.[ ] ShellWorker can pipe to stdout.[ ] Write tests for everything.Dynamic Configuration required for MVPContainer Config (Dockerfile)See Dockerfile. Must dynamically build:# ---- Build Stage ---- FROM alpine-elixir-phoenix:latest AS app_builder RUN Please build the phoenix application... # ---- Application Stage ---- FROM node:12-alpine AS app COPY --from=app_builder /app/_build . # Pull in user credential and job expression... COPY credential.json to ./credential.json COPY expression.js to ./expression.js # Install core and the chosen language package RUN su - app -c &quot;npm install github:openfn/core#v1.3.1 --prefix ./assets&quot; RUN su - app -c &quot;npm install github:openfn/language-dhis2#v1.1.1 --prefix ./assets&quot; USER app CMD './bin/lib/microservice/start' ARG 'foregroundApplication ConfigSee .env.example for a possible config.# basic application config webserver=true # not necessary if we're not saving final state url='some.thing.nice' port='4000' # service configuration EXPRESSION_PATH='./job/expression.js' CREDENTIAL_PATH='./job/credential.json' CRON_EXPRESSION= # (only provided for a timer job) FINAL_STATE_PATH= # if we're saving final state. ADAPTOR_PATH='./assets/node_modules/language-http/lib/Adaptor' NODE_JS_PATH='./assets/node_modules/.bin'How to make it shelf ready?Build and relaese a fully featured documentation site like OpenFn/docsMake fully InstantHIE compliant (including kubernetes.yaml)Build out openfn-devtools to include a script that pulls and configures microservice based one the current configuration of jobs and credentials in devtools.Click a button on OpenFn to prepare a microservice.zip which is this repo with a new Dockerfile, based on the current job's configuration at OpenFn.org (we're not just &quot;shelf ready&quot;, we're providing the shelf with a &quot;free forever&quot; project on our website.)An open-source jobs library.Jobs LibraryAll jobs that &quot;opt-in&quot; on OpenFn.org are exposed with an open API, which expects {adaptor, version, ...helperFunction} and returns [ { expression: 'createTEI({})', active: true, runsLast90: 32178, successRateLast90: 0.973 , source: 'openfn.org' }, { ...job, source: 'openfn/docs' }, ... ] — which includes both the jobs in the OpenFn.org database and the jobs in OpenFn/Docs/jobsThat API is consumed by the docs site (open source) AND by openfn.org so that it can use used to generate jobs with our free-forever projects.In the IDE on OpenFn.org, a user clicks DHIS2, then createTEI and it suggests that you look at the top 10 most successful/active dhis2:your-version expressions, searchable and copy/pastable.New jobs are automatically added to the library from OpenFn.org, and open-source users can submit pull requests to post their jobs to the OpenFn/docs/ repo. (OpenFn/docs is open source also, btw.)Future nice to havesNotifications moduleBetter LoggingVisual interface for application (Phx LiveView?)Message persistence plugin (enables retries)","ref":"readme.html#roadmap-for-this-application","title":"Microservice - Roadmap for this application","type":"extras"}]